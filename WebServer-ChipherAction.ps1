$Pass = "**************" | ConvertTo-SecureString -AsPlainText -Force; $Account='rdomain\account'
$Cred = [System.Management.Automation.PSCredential]::new($Account, $Pass)

$ChipherAction = {

    #Below are Non-compliant & Weak ChipherSuites which needs to be remove or disabled
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384';
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256';
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_DHE_RSA_WITH_AES_256_CBC_SHA';
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_DHE_RSA_WITH_AES_128_CBC_SHA';
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_RC4_128_SHA'; 
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_RC4_128_MD5'; 
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_256_GCM_SHA384'; 
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_128_GCM_SHA256'; 
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_256_CBC_SHA256'; 
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_128_CBC_SHA256'; 
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_256_CBC_SHA'; 
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_128_CBC_SHA'; 
    DISABLE-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_3DES_EDE_CBC_SHA';


    GET-TLSCIPHERSUITE -Name 'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384';
    GET-TLSCIPHERSUITE -NAME 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256';
    GET-TLSCIPHERSUITE -NAME 'TLS_DHE_RSA_WITH_AES_256_CBC_SHA';
    GET-TLSCIPHERSUITE -NAME 'TLS_DHE_RSA_WITH_AES_128_CBC_SHA'; 
    GET-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_RC4_128_SHA'; 
    GET-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_RC4_128_MD5'; 
    GET-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_256_GCM_SHA384'; 
    GET-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_128_GCM_SHA256'; 
    GET-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_256_CBC_SHA256'; 
    GET-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_128_CBC_SHA256'; 
    GET-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_256_CBC_SHA'; 
    GET-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_AES_128_CBC_SHA';  
    GET-TLSCIPHERSUITE -NAME 'TLS_RSA_WITH_3DES_EDE_CBC_SHA';


}


#Web Servers
$Servers = ('server1')

$Servers |  ForEach-Object {

Invoke-Command -ComputerName $_ -ScriptBlock $ChipherAction -Credential $Cred


}
